#include <vector>
#include <deque>
using std::vector;

class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = size(isWater), n = size(isWater[0]);
        vector<vector<int>> ans(m, vector<int>(n, 0));
        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<std::pair<int, int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        std::deque<std::pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isWater[i][j] == 1) {
                    q.push_back({i, j});
                    visited[i][j] = 1;
                }
            }
        }
        while (!q.empty()) {
            auto cur = q.front();
            q.pop_front();
            for (auto& d : dirs) {
                int x = cur.first, y = cur.second;
                int nx = x + d.first, ny = y + d.second;
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny]) continue;
                visited[nx][ny] = 1;
                ans[nx][ny] = ans[x][y] + 1;
                q.push_back({nx, ny});
            }
        }
        return ans; 
    }
};
