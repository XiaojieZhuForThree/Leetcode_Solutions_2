#include <string>
#include <vector>
using std::string;

class Solution {
public:
	long long numberOfPowerfulInt(long long start, long long finish, int limit, string s) {
		string st = std::to_string(start - 1);
		string f = std::to_string(finish);
		std::vector<std::vector<long long>> dp(f.length() + 1, std::vector<long long>(2, -1));
		long long ans = solve(0, true, f, limit, s, dp);
		std::vector<std::vector<long long>> dp2(f.length() + 1, std::vector<long long>(2, -1));
		if (st.length() >= s.length()) ans = ans - solve(0, true, st, limit, s, dp2);
		return ans;
	}

private:
	long long solve(int i, bool tight, string& str, int limit, string& s, std::vector<std::vector<long long>>& dp) {
		if (i == str.length()) {
			return 1;
		}
		if (dp[i][tight] != -1) return dp[i][tight];
		int l = limit;
		if (tight && ((str[i] - '0') <= limit)) {
			l = str[i] - '0';
		}
		long long ans = 0;
		for (int j = 0; j <= l; j++) {
			if (i >= (str.length() - s.length())) {
				if (!tight) {
					return 1;
				}
				else {
					if (stoll(str.substr(i)) >= stoll(s)) return 1;
				}
			}
			else {
				bool newtight = (tight == true && (j == (str[i] - '0')));
				ans = ans + solve(i + 1, newtight, str, limit, s, dp);
			}
		}
		return dp[i][tight] = ans;
	}
};
