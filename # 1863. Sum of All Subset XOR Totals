#include <vector>

using std::vector;

class Solution {
public:
    int subsetXORSum(vector<int>& nums) {
        int ans = 0;
        for (int i : helper(nums, 0))  ans += i;
        return ans;
    }

private:
    vector<int> helper(vector<int>& nums, int i) {
        if (i == size(nums)) return { 0 };
        vector<int> ans;
        for (int j : helper(nums, i + 1)) {
            ans.push_back(j);
            ans.push_back(j ^ nums[i]);
        }
        return ans;
    }
};


#include <vector>
#include <numeric>
using std::vector;

class Solution {
public:
    int subsetXORSum(vector<int>& nums) {
        vector<int> v;
        helper(nums, v, 0);
        return std::accumulate(begin(v), end(v), 0);
    }
private:
    void helper(vector<int>& nums, vector<int>& v, int i) {
        if (i == size(nums)) return;
        for (int j = size(v) - 1; j >= 0; j--) v.push_back(nums[i] ^ v[j]);
        v.push_back(nums[i]);
        helper(nums, v, i + 1);
    }
};
