#include <algorithm>
#include <vector>
using std::vector;

class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        if (!yes(grid, x)) return -1;
        vector<int> v;
        for (auto& g : grid) {
            for (int i : g) v.push_back(i);
        }
        sort(v.begin(), v.end());
        if (size(v) % 2 == 1) return helper(v, v[size(v) / 2], x);
        return std::min(helper(v, v[size(v) / 2 - 1], x), helper(v, v[size(v) / 2], x));
    }
private:
    bool yes(vector<vector<int>>& grid, int x) {
        int mod = grid[0][0] % x;
        for (int i = 0; i < size(grid); i++) {
            for (int j = 0; j < size(grid[0]); j++) {
                if (grid[i][j] % x != mod) return false;
            }
        }
        return true;
    }
    int helper(vector<int>& v, int m, int x) {
        int ans = 0;
        for (auto& i : v) ans += std::abs(i - m) / x;
        return ans;
    }
};
