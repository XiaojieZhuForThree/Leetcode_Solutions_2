#include <vector>
using std::vector;

class Solution {
public:
    vector<int> right, left;
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {

        int n = nums1.size();
        right.resize(n, 0);
        left.resize(n, 0);
        vector<int> pos(n), arr(n);
        for (int i = 0; i < n; i++) {
            pos[nums1[i]] = i;
            arr[i] = nums2[i];
        }
        merge(pos, arr, 0, n - 1);
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long)left[arr[i]] * (long long)right[arr[i]];
        }
        return ans;
    }
private:
    void merge(vector<int>& pos, vector<int>& arr, int l, int r) {
        if (l >= r)return;
        int mid = l + (r - l) / 2;
        long long count = 0;
        merge(pos, arr, l, mid);
        merge(pos, arr, mid + 1, r);
        int i = mid, j = r;
        for (; i >= l; i--) {
            while (j >= mid + 1 && pos[arr[i]] < pos[arr[j]])j--;
            right[arr[i]] += r - j;
        }
        i = l, j = mid + 1;
        for (; j <= r; j++) {
            while (i <= mid && pos[arr[i]] < pos[arr[j]])i++;
            left[arr[j]] += i - l;
        }

        i = l, j = mid + 1;
        int k = 0;
        vector<int> temp(r - l + 1);
        while (i <= mid && j <= r) {
            if (pos[arr[i]] < pos[arr[j]])temp[k++] = arr[i++];
            else temp[k++] = arr[j++];
        }
        while (i <= mid)temp[k++] = arr[i++];
        while (j <= r)temp[k++] = arr[j++];
        for (int i = l; i <= r; i++)arr[i] = temp[i - l];
    }
};
