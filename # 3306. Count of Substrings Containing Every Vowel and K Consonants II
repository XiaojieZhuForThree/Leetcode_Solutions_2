#include <string>
#include <unordered_map>
using std::string;

class Solution {
public:
    long long countOfSubstrings(string word, int k) {
        return helper(word, k) - helper(word, k + 1);
    }
private:
    long long helper(string& word, int k) {
        std::unordered_map<char, int> m = { {'a', 0}, {'e', 0}, {'i', 0}, {'o', 0}, {'u', 0} };
        int c = 0, l = 0, n = size(word);
        long long ans = 0;
        for (int r = 0; r < n; r++) {
            if (m.count(word[r])) m[word[r]]++;
            else c++;
            while (l <= r && c >= k && isValid(m)) {
                ans += n - r;
                if (m.count(word[l])) m[word[l]]--;
                else c--;
                l++;
            }
        }
        return ans;
    }

    bool isValid(std::unordered_map<char, int>& m) {
        for (auto& p : m) {
            if (p.second <= 0) return false;
        }
        return true;
    }
};
