#include <vector>
#include <algorithm>
#include <unordered_map>
using std::vector;

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        std::unordered_map<int, vector<int>> dp;
        vector<int> ans;
        int cur = 0;
        for (int i = 0; i < size(nums); i++) {
            vector<int> cand = { nums[i] };
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] != 0) continue;
                if (size(cand) >= size(dp[nums[j]]) + 1) continue;
                vector<int> n(dp[nums[j]].begin(), dp[nums[j]].end());
                n.push_back(nums[i]);
                cand = n;

            }
            if (size(cand) > cur) {
                cur = size(cand);
                ans = cand;
            }
            dp[nums[i]] = cand;
        }
        return ans;
    }
};


#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = size(nums);
        vector<int> dp(n, 1), prev(n, -1);
        for (int i = 0; i < n; i++) prev[i] = i;
        std::sort(nums.begin(), nums.end());
        int max = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
            }
            if (dp[i] > max) {
                max = dp[i];
                cur = i;
            }
        }
        vector<int> ans;
        while (prev[cur] != cur) {
            ans.push_back(nums[cur]);
            cur = prev[cur];
        }
        ans.push_back(nums[cur]);
        return ans;
    }
};
