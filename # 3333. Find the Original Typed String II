#include <string>
#include <vector>
using std::string;

class Solution {
public:
    int possibleStringCount(string word, int k) {
        int n = word.length();
        long long total = 1;
        const long long mod = 1e9 + 7;
        std::vector<int> segments;
        int cnt = 1;
        for (int i = 1; i < n; i++) {
            if (word[i] != word[i - 1]) {
                segments.push_back(cnt);
                cnt = 1;
            } else {
                cnt++;
            }
        }
        segments.push_back(cnt);
        for (int i = 0; i < segments.size(); i++) {
            total = (total * segments[i]) % mod;
        }
        std::vector<int> prev_row(k + 1, 0);
        for (int x = 1; x <= std::min(segments[0], k - 1); x++) {
            prev_row[x] = 1;
        }
        std::vector<int> curr_row(k + 1, 0);
        std::vector<int> prefix(k + 1, 0);

        int a = segments.size();
        for (int i = 1; i < std::min(a, k); i++) {
            prefix[0] = prev_row[0];
            for (int x = 1; x <= k; x++) {
                prefix[x] = (prefix[x - 1] + prev_row[x]) % mod;
            }
            for (int x = 1; x <= k; x++) {
                int prev_point = std::max(x - segments[i], i);
                curr_row[x] = (prefix[x - 1] - prefix[prev_point - 1] + mod) % mod;
            }
            prev_row = curr_row;
        }
        long long t2 = 0;
        for (int i = 0; i < k; i++) {
            t2 = (t2 + prev_row[i]) % mod;
        }
        return (total - t2 + mod) % mod;
    }
};
