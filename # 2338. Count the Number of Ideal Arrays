#include <vector>

class Solution {
public:
    long long mod = (long long)(1e9 + 7);
    int idealArrays(int n, int maxValue) {
        std::vector<std::vector<long long>> dp(n + 1, std::vector<long long>(15, 0));
        for (int i = 0; i <= n; i++) dp[i][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= 14; j++) {
                for (int t = 0; t <= j; t++) dp[i][j] = (dp[i][j] + dp[i - 1][j - t]) % mod;
            }
        }
        std::vector<int> pms = helper(maxValue);
        long long ans = 0;
        for (int i = 1; i <= maxValue; i++) {
            long long cur = 1;
            int k = i;
            for (int j : pms) {
                int cnt = 0;
                while (k > 1 && (k % j) == 0) {
                    cnt++;
                    k /= j;
                }
                cur = (cur * dp[n][cnt]) % mod;
            }
            ans = (ans + cur) % mod;
        }
        return ans;
    }
private:
    std::vector<int> helper(int m) {
        std::vector<int> v(m + 1, 0);
        for (int i = 2; i <= m; i++) {
            if (v[i] != 0) continue;
            for (int j = 2; i * j <= m; j++) v[i * j] = 1;
        }
        std::vector<int> ans;
        for (int i = 2; i <= m; i++) {
            if (v[i] == 0) ans.push_back(i);
        }
        return ans;
    }
};
