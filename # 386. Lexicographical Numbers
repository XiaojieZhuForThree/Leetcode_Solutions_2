#include <vector>
using std::vector;

class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> ans;
        helper(1, n, ans);
        return ans;
    }
private:
    void helper(int i, int n, vector<int>& v) {
        if (i > n) return;
        v.push_back(i);
        if (i * 10 <= n) helper(i * 10, n, v);
        if (i % 10 != 9 && i + 1 <= n) helper(i + 1, n, v);
        return;
    }
};


#include <vector>
using std::vector;

class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> ans;
        process(1, n, ans);
        return ans;
    }
private:
    void process(int i, int n, vector<int>& ans) {
        if (i > n) return;
        ans.push_back(i);
        process(i * 10, n, ans);
        if (i % 10 < 9) process(i + 1, n, ans);
    }
};
